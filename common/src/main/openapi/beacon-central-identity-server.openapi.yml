---
openapi: 3.0.1
tags:
  - name: Account Management
    description: Create and edit an account + view account details by ID
  - name: City Management
    description: List existing Cities. Register one's self as a City
  - name: Tower User Membership
    description: List towers the user is a member of & join + leave them
  - name: City Interservice Communications
    description: These are APIs that only a City will use
info:
  title: Beacon Central Identity Server API
  version: '@version@'
  description: |
    This is the API for the Central Identity Server (CIS) component of the Beacon backend.
    The CIS is responsible for all tasks relating to identity management and user accounts.

servers:
  - url: 'http://localhost:9876'
    description: localhost
  - url: 'https://beacon-cis-main-staging.herokuapp.com'
    description: Main branch
  - url: 'https://beacon-cis.herokuapp.com'
    description: Production

paths:
  '/account/create-new-account':
    post:
      tags: [ Account Management ]
      summary: Create a new user account
      operationId: createNewAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
      security: []   # No security
      responses:
        '201':
          description: Account created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  '/account/update-profile-picture':
    put:
      tags: [ Account Management ]
      summary: Upload a profile picture for the currently signed-in user. This image MUST be a PNG.
      operationId: updateProfilePicture
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                picture:
                  type: string
                  format: binary
      responses:
        '201':
          description: Picture updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  '/account/{user-account-id}':
    parameters:
      - $ref: '#/components/parameters/user-account-id'
    get:
      tags: [ Account Management ]
      summary: Get information about the user with the specified ID
      operationId: getAccount
      responses:
        '200':
          description: Ok. Operation successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/account/{user-account-id}/profile-picture':
    parameters:
      - $ref: '#/components/parameters/user-account-id'
    get:
      tags: [ Account Management ]
      summary: Get the profile picture file of this specific user
      operationId: getProfilePicture
      responses:
        '200':
          description: Ok. Operation successful.
          content:
            image/png:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/cities':
    get:
      tags: [ City Management ]
      summary: List all known Cities
      operationId: listRegisteredCities
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                title: CitiesList
                description: An array of Cities and their details
                type: array
                items:
                  $ref: '#/components/schemas/City'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  '/cities/{city-id}':
    parameters:
      - $ref: '#/components/parameters/city-id'
    get:
      tags: [ City Management ]
      summary: Get a City by ID
      operationId: getCity
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  '/join/{tower-invite-code}':
    parameters:
      - name: tower-invite-code
        in: path
        description: The invite code
        schema:
          $ref: '#/components/schemas/TowerInvite'
    put:
      tags: [ Tower User Membership ]
      summary: Join a Tower
      operationId: joinTowerWithInviteCode
      responses:
        '204':
          description: Joined.
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  '/city-cis-intercom/register-city':
    parameters:
      - name: city-host-name
        in: query
        required: true
        description: The hostname of the city
        schema:
          type: string
    post:
      tags: [ City Interservice Communications ]
      summary: Register a new City
      description: Registers a new City. The CIS will attempt to use the City's API to make sure it has a valid hostname before finishing the registration process.
      operationId: registerCity
      security: []   # No security
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewCity'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  '/city-cis-intercom/generate-tower-invite':
    post:
      tags: [ City Interservice Communications ]
      summary: Generate an invite
      description: This endpoint expects a City to hit it when generating an invite code for one of its Towers. The API will persist an invite code to its database and will keep track of what user generated that invite as well as the ID of the City and Tower relevant to the request.
      operationId: generateTowerInvite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTowerInviteRequest'
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TowerInvite'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  '/city-cis-intercom/verify-user':
    parameters:
      - name: username
        in: query
        required: true
        description: The username of the user in question
        schema:
          type: string
      - name: password
        in: query
        required: true
        description: The password of the user in question
        schema:
          type: string
    get:
      tags: [ City Interservice Communications ]
      summary: Verify user credentials
      description: Verify that the credentials of a user are valid. Should this endpoint return 200, the City should remember all subsequent requests from that user and not need to consult this endpoint again.
      operationId: verifyUser
      responses:
        '200':
          description: Credentials valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
        '401':
          description: Invalid credentials
        '404':
          $ref: '#/components/responses/NotFound'

#------------------------------------------------------------------------
# Components
#------------------------------------------------------------------------
components:

  #----------------------------------------------------------------------
  # Security Schemes
  #----------------------------------------------------------------------
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

  #----------------------------------------------------------------------
  # Parameter
  #----------------------------------------------------------------------
  parameters:
    $ref: "./parameters/_index.yaml"

  #----------------------------------------------------------------------
  # Schema
  #----------------------------------------------------------------------
  schemas:
    $ref: "./schemas/_index.yaml"

  #----------------------------------------------------------------------
  # Response
  #----------------------------------------------------------------------
  responses:
    $ref: "./responses/_index.yaml"

#------------------------------------------------------------------------
# Security
#------------------------------------------------------------------------
security:
  - basicAuth: [ ]