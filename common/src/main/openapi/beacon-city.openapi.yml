---
openapi: 3.0.1
tags:
  - name: Users
    description: User-related operations
  - name: Towers
    description: List, join, create, edit, and delete Towers
  - name: Channels
    description: All APIs related to the creation, modification, and re-ordering of channels
  - name: Messages
    description: All APIs related to sending and retrieving messages
  - name: Invites
    description: All APIs related to the management of invite codes
info:
  title: Beacon City API
  version: '@version@'
  description: |
    This is the API for the City component of the Beacon backend.
    A City is a service that may host one or more Towers.

servers:
  - url: 'http://localhost:8080'
    description: localhost
  - url: 'https://beacon-city-main-staging.herokuapp.com'
    description: Main branch
  - url: 'https://beacon-city.herokuapp.com'
    description: Production

paths:
  '/memberships':
    parameters:
      - name: user-account-id
        in: query
        description: The ID of a user. If empty or not specified, will default to the user sending this request.
        required: false
        schema:
          type: string
    get:
      tags: [ Users ]
      summary: Get Towers the user is a member of
      operationId: getUserTowerMemberships
      responses:
        '200':
          description: Ok. Operation successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tower'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/towers':
    post:
      tags: [ Towers ]
      summary: Create a new Tower
      operationId: createTower
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tower'
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tower'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      tags: [ Towers ]
      summary: List all known Towers
      operationId: listTowers
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                title: TowersList
                description: An array of Towers and their details
                type: array
                items:
                  $ref: '#/components/schemas/Tower'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  '/towers/list-ids':
    get:
      tags: [ Towers ]
      summary: List all known Towers IDs
      operationId: listTowersIds
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                title: TowerIds
                description: An array of Tower IDs
                type: array
                items:
                  type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  '/towers/{tower-id}':
    parameters:
      - $ref: '#/components/parameters/tower-id'
    get:
      tags: [ Towers ]
      summary: Get a Tower's info by ID
      operationId: getTowerById
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tower'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags: [ Towers ]
      summary: Delete a tower
      operationId: deleteTower
      responses:
        '200':
          description: Deleted.
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  '/towers/{tower-id}/membership':
    parameters:
      - $ref: '#/components/parameters/tower-id'
    get:
      tags: [ Towers ]
      summary: Check if you're the member of a tower
      operationId: checkIfMemberOfTower
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags: [ Towers ]
      summary: Join a tower
      operationId: joinTower
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tower'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags: [ Towers ]
      summary: Leave a tower
      operationId: leaveTower
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tower'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  '/towers/{tower-id}/invites':
    parameters:
      - $ref: '#/components/parameters/tower-id'
    post:
      tags: [ Invites ]
      summary: Create an invite for this tower
      operationId: createInvite
      parameters:
        - name: expiry-time
          in: query
          description: The amount of time until this invite should expire. Set this to 0 for the invite to never expire (unless manually revoked)
          required: true
          schema:
            type: integer
        - name: expiry-time-unit
          in: query
          description: The unit to provide context for the value of expiry-time
          required: true
          schema:
            type: string
            enum:
              - MINUTES
              - HOURS
              - DAYS
        - name: max-uses
          in: query
          description: The number of times this invite is allowed to be used before expiring. Set to 0 to allow for infinite uses. You may still manually revoke this invite at a later time if you so desire.
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TowerInvite'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      tags: [ Invites ]
      summary: List all invites that have been created for this Tower
      operationId: listInvites
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TowerInvite'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  '/towers/{tower-id}/invites/{tower-invite-code}':
    parameters:
      - $ref: '#/components/parameters/tower-id'
      - $ref: '#/components/parameters/tower-invite-code'
    delete:
      tags: [ Invites ]
      summary: Revoke an invite
      operationId: revokeInvite
      description: Calling this endpoint will revoke the specified invite, making it unusable even if it hasn't yet expired or reached its max number of uses
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TowerInvite'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  '/invites/{tower-invite-code}':
    parameters:
      - $ref: '#/components/parameters/tower-invite-code'
    put:
      tags: [ Invites ]
      summary: Use an invite
      operationId: joinUsingInvite
      description: Use the provided invite code to join a Tower in this City. If the Tower the invite is for does not exist here, a 400 will be returned.
      responses:
        '204':
          description: Joined.
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  '/towers/{tower-id}/channels':
    parameters:
      - $ref: '#/components/parameters/tower-id'
    post:
      tags: [ Channels ]
      summary: Create a new channel
      operationId: createChannel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      tags: [ Channels ]
      summary: List all channels in this Tower
      operationId: getChannels
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  '/towers/{tower-id}/channels/{channel-id}':
    parameters:
      - $ref: '#/components/parameters/tower-id'
      - $ref: '#/components/parameters/channel-id'
    delete:
      tags: [ Channels ]
      summary: Delete a channel
      operationId: deleteChannel
      responses:
        '200':
          description: Deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      tags: [ Channels ]
      summary: Modify a channel
      operationId: editChannel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
      responses:
        '200':
          description: Modified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  '/towers/{tower-id}/channels/{channel-id}/messages':
    # TODO: Add query parameters to allow the client to fetch only the most recent N message or messages from between START and END DateTimes
    parameters:
      - $ref: '#/components/parameters/tower-id'
      - $ref: '#/components/parameters/channel-id'
    post:
      tags: [ Messages ]
      summary: Create and send a new message
      operationId: createMessage
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                attachments:
                  type: array
                  items:
                    type: string
                    format: binary
                message:
                  $ref: '#/components/schemas/Message'
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      tags: [ Messages ]
      summary: List all messages in the given channel
      operationId: getMessages
      responses:
        '200':
          description: Created.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  '/towers/{tower-id}/channels/{channel-id}/messages/{message-id}':
    parameters:
      - $ref: '#/components/parameters/tower-id'
      - $ref: '#/components/parameters/channel-id'
      - $ref: '#/components/parameters/message-id'
    put:
      tags: [ Messages ]
      summary: Edit a message
      description: This endpoint allows users to edit their messages. They will get a 401 if their credentials are wrong or if the message doesn't belong to them.
      operationId: editMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags: [ Messages ]
      summary: Delete a message
      description: This endpoint allows users to delete their messages. They will get a 401 if their credentials are wrong or if the message doesn't belong to them. In the future, this endpoint may potentially allow admins or moderators to delete messages that don't blong to them.
      operationId: deleteMessage
      responses:
        '200':
          description: Ok. Message deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

#------------------------------------------------------------------------
# Components
#------------------------------------------------------------------------
components:

  #----------------------------------------------------------------------
  # Security Schemes
  #----------------------------------------------------------------------
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

  #----------------------------------------------------------------------
  # Parameter
  #----------------------------------------------------------------------
  parameters:
    $ref: "./parameters/_index.yaml"

  #----------------------------------------------------------------------
  # Schema
  #----------------------------------------------------------------------
  schemas:
    $ref: "./schemas/_index.yaml"

  #----------------------------------------------------------------------
  # Response
  #----------------------------------------------------------------------
  responses:
    $ref: "./responses/_index.yaml"

#------------------------------------------------------------------------
# Security
#------------------------------------------------------------------------
security:
  - basicAuth: [ ]
