import org.apache.tools.ant.filters.ReplaceTokens
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'org.springframework.boot' version '2.7.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "org.openapi.generator" version "5.4.0"
    id "com.github.node-gradle.node" version "3.3.0"
}

ext {
    beaconCitySpec = "${project.rootDir}/common/src/main/openapi/beacon-city.openapi.yml"
    bundledBeaconCitySpec = "${project.buildDir}/openapi/beacon-city-bundled.openapi.yml"
    versionedBeaconCitySpec = "${project.buildDir}/openapi/beacon-city-versioned.openapi.yml"
    openApiGeneratedSourceDir = "${project.buildDir}/openapi/generated-source"
    openApiGeneratedClientSourceDir = "${project.buildDir}/openapi/generated-client-source"
}

group = 'io.github.incplusplus.beacon'
sourceCompatibility = '17'

springBoot {
    buildInfo {
        version = rootProject.version
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDir "${openApiGeneratedSourceDir}/src/main/java"
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // To get health info while up and running
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    // For access to WebClient (see https://www.baeldung.com/spring-5-webclient)
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation project(':common')
    // Required for OpenApi generator
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // Required for OpenApi generator
    implementation 'io.swagger.core.v3:swagger-annotations:2.1.12'
    // Required for OpenApi generator
    implementation 'org.openapitools:jackson-databind-nullable:0.2.2'
    // For showing Swagger UI
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.8'
    // For conversion between DTOs and Documents/Entities
    implementation 'org.mapstruct:mapstruct:1.5.1.Final'
    // For nicer error messages in the API
    implementation 'org.zalando:problem-spring-web-starter:0.28.0-RC.0'
    // Because Guava has some great utility methods
    implementation 'com.google.guava:guava:31.1-jre'
    // For TSID generation
    implementation 'com.github.f4b6a3:tsid-creator:4.2.1'
    // For DigitalOcean storage
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.244'

    compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.1.Final'
    // https://docs.spring.io/spring-boot/docs/current/reference/html/configuration-metadata.html#configuration-metadata.annotation-processor.configuring
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
    testImplementation("org.assertj:assertj-core:3.23.1")
    // For access to MockWebServer
    testImplementation 'com.squareup.okhttp3:okhttp:4.9.3'
    // For access to MockWebServer
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.3'
}

tasks.named('test') {
    useJUnitPlatform()
}

task bundleSpecs(type: NpxTask) {
    command = 'swagger-cli@4.0.4'
    args = ['bundle',beaconCitySpec,'--outfile',bundledBeaconCitySpec,'--type','yaml']
    inputs.files beaconCitySpec
    outputs.files bundledBeaconCitySpec
    doLast {
        println "Successfully bundled specification!"
    }
}

task createVersionedSpec(type: Copy, dependsOn: bundleSpecs) {
    from bundledBeaconCitySpec
    into "${project.buildDir}/openapi"
    rename { String specFileName -> "beacon-city-versioned.openapi.yml" }
    filter(ReplaceTokens, tokens: [version: project.version])
}

task staticallyServeOpenAPISpec(type: Copy, dependsOn: createVersionedSpec) {
    from versionedBeaconCitySpec
    into "${project.projectDir}/src/main/resources/static/v3"
    rename { String specFileName -> "api-docs.yml" }
}
processResources.dependsOn(staticallyServeOpenAPISpec)

task cleanOldSpec(type: Delete) {
    delete "${project.projectDir}/src/main/resources/static/v3/api-docs.yml"
}
clean.dependsOn cleanOldSpec

task generateServerStubs(type: GenerateTask, dependsOn: createVersionedSpec) {
    generatorName = 'spring'
    inputSpec = versionedBeaconCitySpec
    outputDir = openApiGeneratedSourceDir
    apiPackage = 'io.github.incplusplus.beacon.city.generated.controller'
    modelPackage = 'io.github.incplusplus.beacon.city.generated.dto'
    modelNameSuffix = 'Dto'
    configOptions = [
            'useTags'                : 'true',
            'interfaceOnly'          : 'true',
            'skipDefaultInterface'   : 'true',
            'generateSupportingFiles': 'false',
            'dateLibrary'            : 'custom',
            'useBeanValidation'      : 'true',
            'performBeanValidation'  : 'true',
    ]
    typeMappings = [
            'DateTime': 'Instant',
    ]
    importMappings = [
            'Instant'      : 'java.time.Instant',
            'ZonedDateTime': 'java.time.ZonedDateTime'
    ]
}

task generateClientLibrary(type: GenerateTask, dependsOn: createVersionedSpec) {
    generatorName = 'typescript-fetch'
    inputSpec = versionedBeaconCitySpec
    outputDir = openApiGeneratedClientSourceDir
    configOptions = [
            'npmName'            : 'beacon-city',
            'supportsES6'        : 'true',
            'typescriptThreePlus': 'true'
    ]
}

compileJava.dependsOn(generateServerStubs)
assemble.dependsOn(generateClientLibrary)

// For Heroku
task stage(dependsOn: ['bootJar'])
